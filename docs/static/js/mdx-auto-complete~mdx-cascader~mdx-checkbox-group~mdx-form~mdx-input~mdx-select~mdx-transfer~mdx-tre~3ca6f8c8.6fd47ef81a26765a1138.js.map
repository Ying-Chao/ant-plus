{"version":3,"sources":["webpack:///./src/index.jsx"],"names":["formConfig","inputPlaceholder","selectPlaceholder","requiredMessage","typeMessage","maxMessage","minMessage","fieldRules","rule","label","_formConfig$requiredM2","_slicedToArray","split","requiredBefore","requiredAfter","_formConfig$typeMessa2","typeBefore","typeAfter","_formConfig$maxMessag2","maxBefore","maxAfter","_formConfig$minMessag2","minBefore","minAfter","required","message","concat","string","type","whitespace","number","pattern","numAll","array","email","max","min","phone","id","createRules","rules","map","includes","_rule$split2","numRule","num","Number","selectList","createField","field","disabledFields","props","msg","fieldProps","undefined","displayName","Error","shortMsg","_objectSpread","Array","isArray","disabled","Form","onSubmit","event","preventDefault","_this","_this$props","this","form","api","data","formColon","colon","fields","children","_objectWithoutProperties","createItems","renderNodes","react__WEBPACK_IMPORTED_MODULE_16___default","a","createElement","antd_es_form__WEBPACK_IMPORTED_MODULE_15__","Object","assign","propTypes","t","object","isRequired","bool","func","node","defaultProps","nodes","setConfig","config","React","Children","_node$props","className","_node$props$required","before","after","nodeProps","Item","isNestedField","hide","getValueFromEvent","initialValue","normalize","_nodeProps$rules","trigger","validateFirst","validateTrigger","valuePropName","hidden","options","keys","forEach","key","join","style","display","getFieldDecorator","Input","_this2","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","onChangeWithCount","value","target","setState","count","length","onChange","renderCount","initState","countClass","state","_this$props2","auto","textarea","rows","Fragment","antd_es_input__WEBPACK_IMPORTED_MODULE_13__","TextArea","autosize","minRows","placeholder","autoComplete","suffix","AutoComplete","_this3","search","searchProps","filterOption","val","option","_this$props3","clear","antd_es_auto_complete__WEBPACK_IMPORTED_MODULE_11__","dataSource","allowClear","Select","_this4","mode","showSearch","_this$props4","empty","_keys","_keys$","_keys$2","antd_es_select__WEBPACK_IMPORTED_MODULE_9__","notFoundContent","item","Option","Transfer","_this5","title","description","_this$props5","targetKeys","unit","searchMsg","antd_es_transfer__WEBPACK_IMPORTED_MODULE_7__","titles","locale","itemsUnit","itemUnit","searchPlaceholder","render","Cascader","_this6","_this6$props","last","travelOptions","valueMap","arr","breadValues","_this6$fieldNames","fieldNames","curBreadValues","_props$keys","_props$keys2","_props$keys2$","_props$keys2$2","_props$keys2$3","filter","path","some","_this$props6","antd_es_cascader__WEBPACK_IMPORTED_MODULE_5__","TreeSelect","_this7","getTreeData","formatted","treeData","useKeys","_this7$props","useString","_ref2","_ref2$","_ref2$2","_ref2$3","travelTreeData","newItem","toString","filterTreeNode","RegExp","test","_this$props7","check","expandAll","expandKeys","antd_es_tree_select__WEBPACK_IMPORTED_MODULE_3__","treeCheckable","treeDefaultExpandAll","treeDefaultExpandedKeys","dropdownStyle","maxHeight","overflow","CheckboxGroup","_this8","newData","antd_es_checkbox__WEBPACK_IMPORTED_MODULE_1__","Group","_this$props8","nextProps","prevState","_keys3","_keys3$","_keys3$2","throwError","index","Checkbox"],"mappings":"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","file":"static/js/mdx-auto-complete~mdx-cascader~mdx-checkbox-group~mdx-form~mdx-input~mdx-select~mdx-transfer~mdx-tre~3ca6f8c8.1a952567.js","sourcesContent":["import React from 'react';\nimport * as Ant from 'antd';\nimport t from 'prop-types';\nimport './index.scss';\n\nlet formConfig = {\n  // Placeholder\n  inputPlaceholder: '请输入',\n  selectPlaceholder: '请选择',\n  // Rule messages\n  requiredMessage: '{label}不得为空',\n  typeMessage: '{label}格式有误',\n  maxMessage: '不得超过 {num} 个字',\n  minMessage: '不得少于 {num} 个字',\n};\nconst fieldRules = (rule, label) => {\n  const [requiredBefore, requiredAfter] = formConfig.requiredMessage.split('{label}');\n  const [typeBefore, typeAfter] = formConfig.typeMessage.split('{label}');\n  const [maxBefore, maxAfter] = formConfig.maxMessage.split('{num}');\n  const [minBefore, minAfter] = formConfig.minMessage.split('{num}');\n  const rules = {\n    required: {\n      required: true,\n      message: `${requiredBefore}${label}${requiredAfter}`,\n    },\n    string: {\n      type: 'string',\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    number: {\n      pattern: /^\\d+$/,\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    numAll: {\n      pattern: /^-?\\d+$/,\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    array: {\n      type: 'array',\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    email: {\n      type: 'email',\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    max: {\n      max: label,\n      message: `${maxBefore}${label}${maxAfter}`,\n    },\n    min: {\n      min: label,\n      message: `${minBefore}${label}${minAfter}`,\n    },\n    phone: {\n      pattern: /^1[3456789]\\d{9}$/,\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n    id: {\n      pattern: /^\\d+x?$/i,\n      whitespace: true,\n      message: `${typeBefore}${label}${typeAfter}`,\n    },\n  };\n  return rules[rule];\n};\n\n/**\n * createRules - 根据表单域简写 `rules` 属性生成完整验证规则 (配合 AntPlus.Form 组件使用）\n */\nconst createRules = (label, rules) =>\n  rules.map((rule) => {\n    if (typeof rule !== 'string') return rule;\n    // e.g. \"required\"\n    if (!rule.includes('=')) return fieldRules(rule, label || '');\n    // e.g. \"max=5\"\n    const [numRule, num] = rule.split('=');\n    return fieldRules(numRule, Number(num));\n  });\n\nconst selectList = ['Select', 'Cascader', 'TreeSelect'];\n\n/**\n * createField - 格式化 AntPlus.Form 下的表单域\n */\nconst createField = (field, label, disabledFields, id) => {\n  if (!field.props.msg && !disabledFields) return field;\n  let fieldProps = field.props;\n  // 若 msg (placeholder) 值为 `full`，进行转义\n  if (fieldProps.msg !== undefined && (fieldProps.msg === 'short' || fieldProps.msg === 'full')) {\n    if (field.type.displayName === undefined) {\n      throw new Error('`msg` prop is not allowed for a non `AntPlus` component');\n    }\n    const { displayName } = field.type;\n    const isSelect =\n      typeof displayName === 'string' && selectList.includes(displayName.split('.')[1]);\n    const shortMsg = isSelect ? formConfig.selectPlaceholder : formConfig.inputPlaceholder;\n    const msg = fieldProps.msg === 'short' ? shortMsg : `${shortMsg}${label || ''}`;\n    fieldProps = { ...fieldProps, msg };\n  }\n  // 若 disabledFields 值为 `all`、或为数组且包含当前表单域 `id`，添加 `disabled`\n  if (\n    disabledFields &&\n    id !== undefined &&\n    (disabledFields === 'all' || (Array.isArray(disabledFields) && disabledFields.includes(id)))\n  ) {\n    fieldProps = { ...fieldProps, disabled: true };\n  }\n  // 返回格式化后的 field\n  return { ...field, props: fieldProps };\n};\n\n/**\n * Form - Ant Design Form 组件增强版本\n * @link https://ant.design/components/form-cn/\n */\nclass Form extends Ant.Form {\n  static propTypes = {\n    /** 经 Form.create 包装后注入的 `form` 属性（为规避 Ant Design 提示信息，改为 `api`）*/\n    api: t.object.isRequired,\n    /** 与内部各表单域 `id` 对应的一组 { [id]: value, ... } 数据 */\n    data: t.object,\n    /** 禁用的表单域，全部禁用传 \"all\"，部分禁用传 id 组成的数组 */\n    disabledFields: t.array,\n    /** 是否显示 label 后的冒号 */\n    colon: t.bool,\n    /** 提交表单的回调事件 */\n    onSubmit: t.func,\n    /** 表单域集合（推荐通过 children 传入），e.g. <Input label=\"账号\" id=\"id\" rules=['number'] /> */\n    fields: t.node,\n  };\n  static defaultProps = {\n    data: {},\n    colon: false,\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit();\n  };\n\n  render() {\n    const {\n      api: form,\n      data,\n      disabledFields,\n      colon: formColon,\n      onSubmit,\n      fields,\n      children,\n      ...props\n    } = this.props;\n\n    Form.createItems = Form.renderNodes(form, data, disabledFields, formColon);\n\n    return (\n      <Ant.Form onSubmit={this.onSubmit} {...props}>\n        {Form.createItems(fields || children)}\n      </Ant.Form>\n    );\n  }\n}\n\nForm.displayName = 'AntPlus.Form';\nForm.createItems = (nodes) => nodes;\n// 设置信息\nForm.setConfig = (config) => {\n  formConfig = { ...formConfig, ...config };\n  return formConfig;\n};\n// 渲染节点\nForm.renderNodes = (form, data, disabledFields, formColon) => (nodes) => {\n  if (\n    typeof nodes === 'undefined' ||\n    typeof nodes === 'string' ||\n    typeof nodes === 'boolean' ||\n    typeof nodes === 'function'\n  ) {\n    return nodes;\n  }\n\n  // 遍历节点\n  return React.Children.map(nodes, (node) => {\n    if (!node || !node.props) return node;\n\n    // 根据 `id` 属性，判断子节点是否为表单域，`id` 为表单域唯一标识，请勿被占用\n    const {\n      className,\n      label,\n      id,\n      colon,\n      required = false,\n      before,\n      after,\n      ...nodeProps\n    } = node.props;\n\n    if (id === undefined && label === undefined) {\n      // 若子节点即不存在 `id` 也不存在 `label`，递归查找并包装其 `children` 内表单域\n      const children = Form.createItems(nodeProps.children);\n      return createField({ ...node, props: { ...nodeProps, className, children } });\n    }\n    if (id === undefined && label !== undefined) {\n      // 若子节点不存在 `id`，但存在 `label`，使用 `Form.Item` 包装\n      return (\n        <Ant.Form.Item\n          className={className}\n          label={label}\n          colon={colon || formColon}\n          required={required}\n        >\n          {Form.createItems(before)}\n          {createField({ ...node, props: nodeProps }, label)}\n          {Form.createItems(after)}\n        </Ant.Form.Item>\n      );\n    }\n\n    // 是否为嵌套的表单域（`a` and `a.b`）\n    const isNestedField = nodeProps.form !== undefined;\n\n    // 若子节点存在 `id` 且存在 `label`，则为表单域\n    const {\n      hide,\n      // Official `options` to `getFieldDecorator(id, options)`\n      getValueFromEvent,\n      initialValue,\n      normalize,\n      rules = [],\n      trigger,\n      validateFirst,\n      validateTrigger,\n      valuePropName,\n      hidden,\n      // getValueProps,\n      // validate,\n      // preserve,\n      ...fieldProps\n    } = nodeProps;\n    // options\n    const options = {\n      getValueFromEvent,\n      normalize,\n      trigger,\n      validateFirst,\n      valuePropName,\n      hidden: isNestedField || hidden, // Ignore current field while validating or getting fields\n      // getValueProps,\n      // validate,\n      // preserve,\n    };\n    Object.keys(options).forEach((key) => {\n      if (options[key] === undefined) delete options[key];\n    });\n\n    return (\n      <Ant.Form.Item\n        className={[className, id].join(' ')}\n        label={label}\n        colon={colon || formColon}\n        style={hide === true ? { display: 'none' } : undefined}\n      >\n        {Form.createItems(before)}\n        {form.getFieldDecorator(isNestedField ? `${id}.nested` : id, {\n          rules: createRules(label, rules),\n          validateTrigger: validateTrigger || rules.includes('phone') ? 'onBlur' : 'onChange',\n          initialValue: initialValue !== undefined ? initialValue : data[id],\n          ...options,\n        })(createField({ ...node, props: fieldProps }, label, disabledFields, id))}\n        {Form.createItems(after)}\n      </Ant.Form.Item>\n    );\n  });\n};\n\n/**\n * Input - Ant Design Input (TextArea) 组件增强版本\n * @link https://ant.design/components/input-cn/\n */\nclass Input extends Ant.Input {\n  static propTypes = {\n    /** 最大可输入字符数（传入则显示字符计数器）*/\n    max: t.number,\n    /** `autoComplete` 属性（关闭需传入 \"off\"）*/\n    auto: t.string,\n    /** `placeholder` 属性（可传入 `short` 或 `full`，在 AntPlus.Form 中时有效）。\n     e.g. `short` => `请输入`, `full` => `请输入XXX`, `其它提示信息` => `其它提示信息`*/\n    msg: t.string,\n    /** 默认为 Input 组件，若传入 textarea，则为 TextArea 组件 */\n    textarea: t.bool,\n    /** 若为 TextArea 时的输入框行高 */\n    rows: t.number,\n  };\n  static defaultProps = {\n    textarea: false,\n    rows: 2,\n  };\n\n  constructor(props) {\n    super(props);\n    const { max } = props;\n    const initState = {};\n    if (typeof max === 'number') {\n      this.countClass = 'ant-plus-input-with-count';\n      this.onChange = this.onChangeWithCount;\n      const { value } = props;\n      initState.count = value ? value.length : 0;\n    } else {\n      const { onChange } = props;\n      this.onChange = onChange;\n    }\n    this.state = initState;\n  }\n  onChangeWithCount = (event) => {\n    const { value } = event.target;\n    this.setState({ count: value.length });\n    const { onChange } = this.props;\n    onChange(value);\n  };\n  renderCount = (max, count) => (\n    <span className={['count', count > max ? ' red' : ''].join('')}>\n      {count} | {max}\n    </span>\n  );\n\n  render() {\n    const { onChange, max, auto, msg, textarea, rows, ...props } = this.props;\n    const { count } = this.state;\n\n    return (\n      <span className={['ant-plus-input', this.countClass].join(' ')}>\n        {textarea === true ? (\n          <>\n            <Ant.Input.TextArea\n              onChange={this.onChange}\n              autosize={{ minRows: rows || 5 }}\n              placeholder={msg}\n              {...props}\n            />\n            {typeof max === 'number' && this.renderCount(max, count)}\n          </>\n        ) : (\n          <Ant.Input\n            autoComplete={auto}\n            onChange={this.onChange}\n            placeholder={msg}\n            suffix={typeof max === 'number' && this.renderCount(max, count)}\n            {...props}\n          />\n        )}\n      </span>\n    );\n  }\n}\n\nInput.displayName = 'AntPlus.Input';\n\n/**\n * AutoComplete - Ant Design AutoComplete 组件增强版本\n * @link https://ant.design/components/auto-complete-cn/\n */\nclass AutoComplete extends Ant.AutoComplete {\n  static propTypes = {\n    /** `dataSource` 属性 */\n    data: t.array,\n    /** 是否可搜索 */\n    search: t.bool,\n    /** `allowClear` 属性 */\n    clear: t.bool,\n    /** `placeholder` 属性（可传入 `short` 或 `full`，在 AntPlus.Form 中时有效）*/\n    msg: t.string,\n  };\n  static defaultProps = {\n    data: [],\n    search: false,\n    clear: false,\n  };\n\n  constructor(props) {\n    super(props);\n    const { search } = props;\n    if (search === true) {\n      this.searchProps = {\n        filterOption: (val, option) => option.props.children.includes(val),\n      };\n    }\n  }\n\n  render() {\n    const { data, search, clear, msg, ...props } = this.props;\n\n    return (\n      <Ant.AutoComplete\n        {...this.searchProps}\n        dataSource={data}\n        allowClear={clear}\n        placeholder={msg}\n        {...props}\n      />\n    );\n  }\n}\n\nAutoComplete.displayName = 'AntPlus.AutoComplete';\n\n/**\n * Select - Ant Design Select 组件增强版本\n * @link https://ant.design/components/select-cn/\n */\nclass Select extends Ant.Select {\n  static propTypes = {\n    /** 列表数据源 */\n    data: t.array,\n    /** 当数据源条目中的 key 不是 `value` (值) 与 `label` (展示的汉字) 时传入，e.g. 如 [{ id: 1, name: ''}, ...]，则传入 ['id', 'name'] */\n    keys: t.array,\n    /** 是否可搜索 */\n    search: t.bool,\n    /** `allowClear` 属性 */\n    clear: t.bool,\n    /** `notFoundContent` 属性 */\n    empty: t.string,\n    /** `placeholder` 属性（可传入 `short` 或 `full`，在 AntPlus.Form 中时有效）。\n     e.g. `short` => `请选择`, `full` => `请选择XXX`, `其它提示信息` => `其它提示信息`*/\n    msg: t.string,\n  };\n  static defaultProps = {\n    data: [],\n    keys: ['value', 'label'],\n    search: false,\n    clear: false,\n    empty: '列表为空',\n  };\n\n  constructor(props) {\n    super(props);\n    const { search, mode } = props;\n    if (search === true || mode === 'multiple' || mode === 'tags') {\n      this.searchProps = {\n        showSearch: true,\n        filterOption: (val, option) => option.props.children.includes(val),\n      };\n    }\n  }\n\n  render() {\n    const { data, keys, search, clear, empty, msg, ...props } = this.props;\n    const [value = 'value', label = 'label'] = keys;\n\n    return (\n      <Ant.Select\n        className=\"ant-plus-select\"\n        {...this.searchProps}\n        allowClear={clear}\n        notFoundContent={empty}\n        placeholder={msg}\n        {...props}\n      >\n        {data.map((item) => (\n          <Ant.Select.Option key={item[label]} value={item[value]} disabled={item.disabled}>\n            {item[label]}\n          </Ant.Select.Option>\n        ))}\n      </Ant.Select>\n    );\n  }\n}\n\nSelect.displayName = 'AntPlus.Select';\n\n/**\n * Transfer - Ant Design Transfer 组件增强版本\n * @link https://ant.design/components/transfer-cn/\n */\nclass Transfer extends Ant.Transfer {\n  static propTypes = {\n    /** `dataSource` 属性 */\n    data: t.array,\n    /** 是否可搜索 */\n    search: t.bool,\n    /** 组件 `未选择XXX` `已选择XXX` 的 `XXX` 文案 */\n    title: t.string,\n    /** 数字后面的单位 */\n    unit: t.string,\n    /** `notFoundContent` 属性 */\n    empty: t.string,\n    /** 搜索框 `placeholder` 属性 */\n    searchMsg: t.string,\n  };\n  static defaultProps = {\n    data: [],\n    search: false,\n    title: '',\n    unit: '项',\n    empty: '列表为空',\n    searchMsg: '搜索',\n    render: (item) => item.title,\n  };\n\n  constructor(props) {\n    super(props);\n    const { search } = props;\n    if (search === true) {\n      this.searchProps = {\n        showSearch: true,\n        filterOption: (val, option) => `${option.title}${option.description || ''}`.includes(val),\n      };\n    }\n  }\n\n  render() {\n    const { data, targetKeys, value, search, title, unit, empty, searchMsg, ...props } = this.props;\n\n    return (\n      <Ant.Transfer\n        {...this.searchProps}\n        dataSource={data}\n        targetKeys={targetKeys || value}\n        titles={[`未选择${title}`, `已选择${title}`]}\n        locale={{\n          itemsUnit: unit,\n          itemUnit: unit,\n          notFoundContent: empty,\n          searchPlaceholder: searchMsg,\n        }}\n        {...props}\n      />\n    );\n  }\n}\n\nTransfer.displayName = 'AntPlus.Transfer';\n\n/**\n * Cascader - Ant Design Cascader 组件增强版本\n * @link https://ant.design/components/cascader-cn/\n */\nclass Cascader extends Ant.Cascader {\n  static propTypes = {\n    /** `options` 属性 */\n    data: t.array,\n    /** 当数据源条目中的 key 不是 `value` `label` `children` 时传入 */\n    keys: t.array,\n    /** 是否可搜索 */\n    search: t.bool,\n    /** `allowClear` 属性 */\n    clear: t.bool,\n    /** `notFoundContent` 属性 */\n    empty: t.string,\n    /** `placeholder` 属性 */\n    msg: t.string,\n    /** `value` 是否只传出数组的最后一个 id（在 AntPlus.Form 中时有效）*/\n    last: t.bool,\n  };\n  static defaultProps = {\n    data: [],\n    keys: ['value', 'label', 'children'],\n    search: false,\n    clear: true,\n    empty: '列表为空',\n    msg: '请选择',\n    last: false,\n  };\n\n  constructor(props) {\n    super(props);\n    const {\n      keys: [value = 'value', label = 'label', children = 'children'] = [],\n      search,\n      last,\n    } = props;\n    // 初始化 fieldNames\n    this.fieldNames = { value, label, children };\n    // 是否可搜索\n    if (search === true) {\n      this.searchProps = {\n        showSearch: { filter: (val, path) => path.some((option) => option[label].includes(val)) },\n      };\n    }\n    // 是否只传出数组的最后一个 value\n    if (last === true) {\n      this.valueMap = {};\n    }\n  }\n  onChange = (value) => {\n    const { last, onChange } = this.props;\n    onChange(last === true ? value[value.length - 1] : value);\n  };\n  travelOptions = (valueMap, arr, breadValues) => {\n    if (arr.length === 0) return;\n    const { value, children } = this.fieldNames;\n    arr.forEach((item) => {\n      const curBreadValues = breadValues.concat(item[value]);\n      if (item[children]) {\n        this.travelOptions(valueMap, item[children], curBreadValues);\n      } else {\n        valueMap[item[value]] = curBreadValues;\n      }\n    });\n  };\n\n  render() {\n    const { value, data, keys, search, clear, empty, msg, last, ...props } = this.props;\n\n    if (last === true && Object.keys(this.valueMap).length === 0 && data.length > 0) {\n      this.travelOptions(this.valueMap, data, []);\n    }\n\n    return (\n      <Ant.Cascader\n        {...this.searchProps}\n        options={data}\n        fieldNames={this.fieldNames}\n        value={last === true ? this.valueMap[value] : value}\n        onChange={this.onChange}\n        allowClear={clear}\n        notFoundContent={empty}\n        placeholder={msg}\n        {...props}\n      />\n    );\n  }\n}\n\nCascader.displayName = 'AntPlus.Cascader';\n\n/**\n * TreeSelect - Ant Design TreeSelect 组件增强版本\n * @link https://ant.design/components/tree-select-cn/\n */\nclass TreeSelect extends Ant.TreeSelect {\n  static propTypes = {\n    /** `treeData` 属性 */\n    data: t.array,\n    /** 当数据源条目中的 key 不是 `value` `title` `children` 时传入 */\n    keys: t.array,\n    /** 当数据源条目中的 `value` 为 number 类型时传入 */\n    useString: t.bool,\n    /** 是否可搜索 */\n    search: t.bool,\n    /** `treeCheckable` 属性 */\n    check: t.bool,\n    /** `treeDefaultExpandAll` 属性 */\n    expandAll: t.bool,\n    /** `treeDefaultExpandedKeys` 属性 */\n    expandKeys: t.array,\n    /** `allowClear` 属性 */\n    clear: t.bool,\n    /** `placeholder` 属性 */\n    msg: t.string,\n    /** `searchPlaceholder` 属性 */\n    searchMsg: t.string,\n  };\n  static defaultProps = {\n    data: [],\n    keys: ['value', 'title', 'children'],\n    search: false,\n    check: false,\n    expandAll: false,\n    clear: false,\n    msg: '请选择',\n    searchMsg: '搜索',\n    dropdownStyle: { maxHeight: 400, overflow: 'auto' },\n  };\n\n  constructor(props) {\n    super(props);\n    const { search, keys, useString } = props;\n    if (search === true) {\n      this.searchProps = {\n        showSearch: true,\n        filterTreeNode: (val, node) => new RegExp(val, 'i').test(`${node.value}${node.title}`),\n      };\n    }\n    this.useKeys = keys !== undefined || useString !== undefined;\n  }\n  getTreeData = (data) => {\n    if (this.formatted) return this.treeData;\n    if (this.useKeys && data.length > 0) {\n      const { useString, keys } = this.props;\n      const [value = 'value', title = 'title', children = 'children'] = keys || [];\n      this.treeData = this.travelTreeData(data, useString, value, title, children);\n      this.formatted = true;\n    } else {\n      this.treeData = data;\n    }\n    return this.treeData;\n  };\n  travelTreeData = (data, useString, value, title, children) =>\n    data.map((item) => {\n      const newItem = {\n        value: useString !== true ? item[value] : item[value].toString(),\n        title: item[title],\n      };\n      if (item[children]) {\n        newItem.children = this.travelTreeData(item[children], useString, value, title, children);\n      }\n      return newItem;\n    });\n\n  render() {\n    const {\n      data,\n      value,\n      keys,\n      useString,\n      msg,\n      check,\n      expandAll,\n      expandKeys,\n      clear,\n      search,\n      searchMsg,\n      ...props\n    } = this.props;\n\n    return (\n      <Ant.TreeSelect\n        className=\"ant-plus-tree-select\"\n        {...this.searchProps}\n        treeData={this.getTreeData(data)}\n        value={this.treeData.length > 0 ? value : undefined}\n        treeCheckable={check}\n        treeDefaultExpandAll={expandAll}\n        treeDefaultExpandedKeys={expandKeys}\n        allowClear={clear}\n        placeholder={msg}\n        searchPlaceholder={searchMsg}\n        {...props}\n      />\n    );\n  }\n}\n\nTreeSelect.displayName = 'AntPlus.TreeSelect';\n\n/**\n * Checkbox.Group - Ant Design Checkbox.Group 组件增强版本\n * @link https://ant.design/components/checkbox-cn/\n */\nclass CheckboxGroup extends Ant.Checkbox.Group {\n  static propTypes = {\n    /** `options` 属性 */\n    data: t.array,\n    /** 当数据源条目中的 key 不是 `value` `label` 时传入（需与 `data` 配合使用）*/\n    keys: t.array,\n  };\n  static defaultProps = {\n    data: [],\n    keys: ['value', 'label'],\n  };\n\n  constructor(props) {\n    super(props);\n    const { keys } = props;\n    this.useKeys = Array.isArray(keys) && keys[0] !== 'value';\n    if (this.useKeys) {\n      this.state = {\n        useKeys: this.useKeys,\n        newData: [],\n      };\n    }\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { useKeys } = prevState;\n    if (!useKeys) return null;\n\n    // useKeys\n    const { data } = nextProps;\n    if (data.length === 0 || prevState.newData.length > 0) return null;\n\n    const { keys } = nextProps;\n    const [value = 'value', label = 'label'] = keys;\n    const throwError = (key, index) => {\n      throw new Error(`\\`data[${index}].${key}\\` is undefined`);\n    };\n    const newData = data.map((item, index) => {\n      if (item[value] === undefined) throwError(value, index);\n      if (item[label] === undefined) throwError(label, index);\n      return {\n        value: item[value],\n        label: item[label],\n      };\n    });\n    return { newData };\n  }\n\n  render() {\n    const { data, keys, ...props } = this.props;\n    const { newData } = this.state;\n\n    return <Ant.Checkbox.Group options={this.useKeys ? newData : data} {...props} />;\n  }\n}\n\nclass Checkbox extends Ant.Checkbox {\n  render() {\n    return <Ant.Checkbox {...this.props} />;\n  }\n}\nCheckbox.Group = CheckboxGroup;\n\n/**\n * exports\n */\nexport {\n  // Form\n  Form,\n  Input,\n  AutoComplete,\n  Select,\n  Transfer,\n  Cascader,\n  TreeSelect,\n  Checkbox,\n  CheckboxGroup,\n};\n"],"sourceRoot":""}